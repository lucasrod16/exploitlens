package vuln

import (
	"fmt"

	"github.com/anchore/grype/grype"
	"github.com/anchore/grype/grype/match"
	"github.com/anchore/grype/grype/pkg"
	"github.com/anchore/grype/grype/store"
	"github.com/anchore/syft/syft/source"
	"github.com/defenseunicorns/zarf/src/pkg/message"
)

// ScanImage scans a container image for CVEs and returns them as a map.
func ScanImage(store store.Store, image string) (matchMap map[pkg.ID][]match.Match, err error) {
	spinner := message.NewProgressSpinner(fmt.Sprintf("Scanning image: %s", image))
	defer spinner.Stop()
	matchMap, err = scanImageForVulnerabilities(store, image)
	if err != nil {
		return nil, err
	}
	spinner.Success()
	return matchMap, nil
}

func scanImageForVulnerabilities(store store.Store, image string) (matchMap map[pkg.ID][]match.Match, err error) {
	matches, _, _, err := grype.FindVulnerabilities(store, image, source.SquashedScope, nil)
	if err != nil {
		return nil, err
	}
	matchMap = matches.AllByPkgID()
	return matchMap, nil
}
